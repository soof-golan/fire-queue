// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// The BurnerEvent model represents a single event that users can sign up to
// This name is mostly a joke that references the fact that this
// service is targeted at "burn" events
model BurnerEvent {
  id            String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  date          DateTime
  description   String
  formFields    FormField[]
  registrations UserEventRegistration[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

model FormField {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  type              FormFieldType
  required          Boolean
  BurnerEvent       BurnerEvent?        @relation(fields: [burnerEventId], references: [id])
  burnerEventId     String?             @db.Uuid
  FormFieldResponse FormFieldResponse[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

enum FormFieldType {
  TEXT
  EMAIL
}

model FormFieldResponse {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  formField             FormField             @relation(fields: [formFieldId], references: [id])
  formFieldId           String                @db.Uuid
  value                 String
  userEventRegistration UserEventRegistration @relation(fields: [registrationId], references: [id])
  registrationId        String                @db.Uuid
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  @@unique([formFieldId, registrationId])
}

model UserEventRegistration {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event             BurnerEvent         @relation(fields: [eventId], references: [id])
  eventId           String              @db.Uuid
  email             String
  FormFieldResponse FormFieldResponse[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@unique([eventId, email])
}

// ---- Next Auth models ----
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---- End Next Auth models ----
